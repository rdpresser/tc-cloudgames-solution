name: 🏗️ Infrastructure | Pure Terraform Foundation

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      confirm_deploy:
        description: 'Type "deploy" to confirm'
        required: true
        default: ''

env:
  TF_VERSION: '1.13.1'
  TF_WORKING_DIR: './infrastructure/terraform/foundation'
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE_DEV }}

jobs:

  terraform-deploy:
    runs-on: ubuntu-latest
    environment: 'dev-rodrigo'
    timeout-minutes: 40
    outputs:
      tf_output_rg: ${{ steps.terraform-outputs.outputs.rg_name }}
      tf_output_location: ${{ steps.terraform-outputs.outputs.location }}
      tf_output_log_analytics_id: ${{ steps.terraform-outputs.outputs.log_analytics_id }}
    if: |
      (github.event_name == 'pull_request' && 
       github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.confirm_deploy == 'deploy')
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Validate Required Secrets
        run: |
          if [ -z "${{ secrets.TF_API_TOKEN }}" ]; then
            echo "❌ TF_API_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "❌ AZURE_CREDENTIALS secret is required"
            exit 1
          fi

      - name: 🗂️ Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            **/.terraform
          key: terraform-${{ env.TF_VERSION }}-${{ hashFiles('**/*.tf') }}

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🏗️ Terraform Deploy Foundation
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Record deployment start time
          DEPLOYMENT_START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          DEPLOYMENT_START_UNIX=$(date +%s)
          echo "DEPLOYMENT_START_TIME=$DEPLOYMENT_START_TIME" >> $GITHUB_ENV
          echo "DEPLOYMENT_START_UNIX=$DEPLOYMENT_START_UNIX" >> $GITHUB_ENV
          
          echo "🚀 Starting Terraform deployment at $DEPLOYMENT_START_TIME"
          
          terraform init -upgrade
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
          
          # Record deployment end time
          DEPLOYMENT_END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          DEPLOYMENT_END_UNIX=$(date +%s)
          echo "DEPLOYMENT_END_TIME=$DEPLOYMENT_END_TIME" >> $GITHUB_ENV
          echo "DEPLOYMENT_END_UNIX=$DEPLOYMENT_END_UNIX" >> $GITHUB_ENV
          
          # Calculate duration
          DURATION_SECONDS=$((DEPLOYMENT_END_UNIX - DEPLOYMENT_START_UNIX))
          DURATION_MINUTES=$(echo "scale=2; $DURATION_SECONDS / 60" | bc -l)
          echo "DEPLOYMENT_DURATION_SECONDS=$DURATION_SECONDS" >> $GITHUB_ENV
          echo "DEPLOYMENT_DURATION_MINUTES=$DURATION_MINUTES" >> $GITHUB_ENV
          
          # Performance rating
          if [ $DURATION_SECONDS -lt 300 ]; then
            PERFORMANCE_RATING="🚀 Excellent (< 5min)"
          elif [ $DURATION_SECONDS -lt 600 ]; then
            PERFORMANCE_RATING="✅ Good (5-10min)"
          elif [ $DURATION_SECONDS -lt 900 ]; then
            PERFORMANCE_RATING="⚠️ Acceptable (10-15min)"
          else
            PERFORMANCE_RATING="🐌 Slow (> 15min)"
          fi
          echo "PERFORMANCE_RATING=$PERFORMANCE_RATING" >> $GITHUB_ENV
          
          # Resources per minute
          RESOURCES_PER_MIN=$(echo "scale=2; 8 / ($DURATION_SECONDS / 60)" | bc -l)
          echo "RESOURCES_PER_MINUTE=$RESOURCES_PER_MIN" >> $GITHUB_ENV
          
          echo "✅ Deployment completed at $DEPLOYMENT_END_TIME"
          echo "⏱️ Total duration: ${DURATION_MINUTES} minutes (${DURATION_SECONDS}s)"

      - name: � Extract Infrastructure Outputs
        id: terraform-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          TERRAFORM_OUTPUT=$(terraform output -json)
          
          # Extract and set outputs for downstream deployments
          RG_NAME=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_name.value')
          LOCATION=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_location.value')
          LOG_ANALYTICS_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.log_analytics_workspace_id.value')
          
          echo "rg_name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "location=$LOCATION" >> $GITHUB_OUTPUT
          echo "log_analytics_id=$LOG_ANALYTICS_ID" >> $GITHUB_OUTPUT

      - name: � Infrastructure Deployment Summary
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          TERRAFORM_OUTPUT=$(terraform output -json)
          
          # Extract key infrastructure details
          RG_NAME=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_name.value')
          LOCATION=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_location.value')
          CONTAINER_APP_ENV=$(echo $TERRAFORM_OUTPUT | jq -r '.container_app_environment_info.value.name')
          KEY_VAULT_NAME=$(echo $TERRAFORM_OUTPUT | jq -r '.key_vault_info.value.name')
          
          # Extract deployment timing metrics from environment variables
          DEPLOYMENT_DURATION_MIN=$DEPLOYMENT_DURATION_MINUTES
          DEPLOYMENT_DURATION_SEC=$DEPLOYMENT_DURATION_SECONDS
          PERFORMANCE_RATING="$PERFORMANCE_RATING"
          RESOURCES_PER_MIN=$RESOURCES_PER_MINUTE
          START_TIME="$DEPLOYMENT_START_TIME"
          END_TIME="$DEPLOYMENT_END_TIME"
          
          # Generate comprehensive deployment summary
          echo "## 🏗️ TC CloudGames Infrastructure - Pure Terraform Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏱️ Deployment Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Duration** | ${DEPLOYMENT_DURATION_MIN} minutes (${DEPLOYMENT_DURATION_SEC}s) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Performance Rating** | ${PERFORMANCE_RATING} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment Speed** | ${RESOURCES_PER_MIN} resources/minute |" >> $GITHUB_STEP_SUMMARY
          echo "| **Start Time** | ${START_TIME} |" >> $GITHUB_STEP_SUMMARY
          echo "| **End Time** | ${END_TIME} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Foundation Resources" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Type | Resource Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | $RG_NAME | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | $LOCATION | ✅ Configured |" >> $GITHUB_STEP_SUMMARY
          echo "| Container App Environment | $CONTAINER_APP_ENV | ✅ Ready for Container Apps |" >> $GITHUB_STEP_SUMMARY
          echo "| Key Vault | $KEY_VAULT_NAME | ✅ Configured with RBAC |" >> $GITHUB_STEP_SUMMARY
          echo "| PostgreSQL Server | $(echo $TERRAFORM_OUTPUT | jq -r '.postgres_info.value.name') | ✅ Ready for connections |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Registry | $(echo $TERRAFORM_OUTPUT | jq -r '.acr_info.value.name') | ✅ Ready for images |" >> $GITHUB_STEP_SUMMARY
          echo "| Redis Cache | $(echo $TERRAFORM_OUTPUT | jq -r '.redis_info.value.name') | ✅ Ready for caching |" >> $GITHUB_STEP_SUMMARY
          echo "| Service Bus | $(echo $TERRAFORM_OUTPUT | jq -r '.servicebus_info.value.namespace') | ✅ Ready for messaging |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Application Deployment Ready" >> $GITHUB_STEP_SUMMARY  
          echo "- **Users API**: Infrastructure ready for Container App deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Games API**: Infrastructure ready for Container App deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Payments API**: Infrastructure ready for Container App deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Infrastructure in Azure Portal](https://portal.azure.com/#@/resource$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_id.value')/overview)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Security & Access Control" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Service Principal**: Full Key Vault access configured via Terraform" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **GitHub Actions**: Secrets access configured via Terraform" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **User Account**: Administrative access configured via Terraform" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Connection Secrets**: Pre-populated and ready for applications" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Pure Terraform Architecture Benefits" >> $GITHUB_STEP_SUMMARY
          echo "✨ **Single Source of Truth**: All infrastructure managed through Terraform" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Consistent Deployments**: Reproducible infrastructure across environments" >> $GITHUB_STEP_SUMMARY
          echo "🛡️ **Proper RBAC Sequencing**: Key Vault → Roles → Secrets in correct order" >> $GITHUB_STEP_SUMMARY
          echo "🎮 **Ready for Gaming Platform**: Foundation optimized for gaming workloads" >> $GITHUB_STEP_SUMMARY
