name: 💰 Infra | Cost Management (Start/Stop/Destroy)

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Choose operation'
        required: true
        type: choice
        options:
          - 'up (start: PostgreSQL + Container Apps)'
          - 'down (stop: PostgreSQL + Container Apps)'
          - 'destroy all resources'
        default: 'up (start: PostgreSQL + Container Apps)'
      confirm_operation:
        description: 'Type operation name to confirm (up/down/destroy)'
        required: true
        default: ''

env:
  TF_VERSION: '1.13.1'
  TF_WORKING_DIR: './infrastructure/terraform/foundation'
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE_DEV }}

jobs:
  cost-management:
    runs-on: ubuntu-latest
    environment: 'dev-rodrigo'
    timeout-minutes: 15
    if: |
      (github.event.inputs.confirm_operation == 'up' && contains(github.event.inputs.operation, 'up')) ||
      (github.event.inputs.confirm_operation == 'down' && contains(github.event.inputs.operation, 'down')) ||
      (github.event.inputs.confirm_operation == 'destroy' && contains(github.event.inputs.operation, 'destroy'))
    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Validate Required Secrets
        run: |
          if [ -z "${{ secrets.TF_API_TOKEN }}" ]; then
            echo "❌ TF_API_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "❌ AZURE_CREDENTIALS secret is required"
            exit 1
          fi

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 📤 Get Terraform Outputs
        id: terraform-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -upgrade
          TERRAFORM_OUTPUT=$(terraform output -json)
          
          # Extract resource group and key info
          RG_NAME=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_name.value')
          RG_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_id.value')
          
          echo "rg_name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "rg_id=$RG_ID" >> $GITHUB_OUTPUT

      - name: 🔒 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 📋 Validate Resources
        id: validate
        if: contains(github.event.inputs.operation, 'up') || contains(github.event.inputs.operation, 'down')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "🔍 Validating resource group: $RG_NAME"
          
          # Check if resource group exists
          if ! az group show --name "$RG_NAME" > /dev/null 2>&1; then
            echo "❌ Resource group not found: $RG_NAME"
            exit 1
          fi
          
          # Get resource information
          POSTGRES_NAME=$(az postgres flexible-server list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          REDIS_NAME=$(az redis list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          ACR_NAME=$(az acr list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          CONTAINER_APP_ENV=$(az containerapp env list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          
          echo "postgres_name=$POSTGRES_NAME" >> $GITHUB_OUTPUT
          echo "redis_name=$REDIS_NAME" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "container_app_env=$CONTAINER_APP_ENV" >> $GITHUB_OUTPUT
          
          # Get container apps in environment
          if [ ! -z "$CONTAINER_APP_ENV" ]; then
            CONTAINER_APPS=$(az containerapp list --resource-group "$RG_NAME" --query "[].name" -o tsv | tr '\n' ' ')
            echo "container_apps=$CONTAINER_APPS" >> $GITHUB_OUTPUT
          fi

      - name: ⬆️ START Services (UP Operation)
        if: contains(github.event.inputs.operation, 'up')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "🚀 Starting TC CloudGames infrastructure..."
          
          # Start PostgreSQL
          if [ ! -z "${{ steps.validate.outputs.postgres_name }}" ]; then
            echo "▶️ Starting PostgreSQL: ${{ steps.validate.outputs.postgres_name }}"
            az postgres flexible-server start \
              --resource-group "$RG_NAME" \
              --name "${{ steps.validate.outputs.postgres_name }}"
            echo "✅ PostgreSQL started"
          else
            echo "⚠️ No PostgreSQL server found"
          fi
          
          # Start Container Apps (scale up to 1 replica)
          if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
            for app in ${{ steps.validate.outputs.container_apps }}; do
              echo "▶️ Starting Container App: $app"
              az containerapp update \
                --resource-group "$RG_NAME" \
                --name "$app" \
                --min-replicas 1 \
                --max-replicas 3
              echo "✅ Container App $app started"
            done
          else
            echo "⚠️ No Container Apps found"
          fi
          
          # Redis and ACR are always available (no start/stop operations)
          if [ ! -z "${{ steps.validate.outputs.redis_name }}" ]; then
            echo "ℹ️ Redis Cache: ${{ steps.validate.outputs.redis_name }} (always available)"
          fi
          
          if [ ! -z "${{ steps.validate.outputs.acr_name }}" ]; then
            echo "ℹ️ Container Registry: ${{ steps.validate.outputs.acr_name }} (always available)"
          fi

      - name: ⬇️ STOP Services (DOWN Operation)
        if: contains(github.event.inputs.operation, 'down')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "🛑 Stopping TC CloudGames infrastructure for cost savings..."
          
          # Stop Container Apps (scale down to 0 replicas)
          if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
            for app in ${{ steps.validate.outputs.container_apps }}; do
              echo "⏹️ Stopping Container App: $app"
              az containerapp update \
                --resource-group "$RG_NAME" \
                --name "$app" \
                --min-replicas 0 \
                --max-replicas 0
              echo "✅ Container App $app stopped"
            done
          else
            echo "⚠️ No Container Apps found"
          fi
          
          # Stop PostgreSQL
          if [ ! -z "${{ steps.validate.outputs.postgres_name }}" ]; then
            echo "⏹️ Stopping PostgreSQL: ${{ steps.validate.outputs.postgres_name }}"
            az postgres flexible-server stop \
              --resource-group "$RG_NAME" \
              --name "${{ steps.validate.outputs.postgres_name }}"
            echo "✅ PostgreSQL stopped"
          else
            echo "⚠️ No PostgreSQL server found"
          fi
          
          # Redis and ACR remain available (cost optimization note)
          if [ ! -z "${{ steps.validate.outputs.redis_name }}" ]; then
            echo "ℹ️ Redis Cache: ${{ steps.validate.outputs.redis_name }} (keeping available - basic tier)"
          fi
          
          if [ ! -z "${{ steps.validate.outputs.acr_name }}" ]; then
            echo "ℹ️ Container Registry: ${{ steps.validate.outputs.acr_name }} (keeping available - basic tier)"
          fi

      - name: 🗑️ DESTROY All Resources (DESTROY Operation)
        if: contains(github.event.inputs.operation, 'destroy')
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "🚨 DESTROYING TC CloudGames infrastructure..."
          echo "⚠️ This will permanently delete all resources!"
          
          # Terraform destroy
          terraform destroy -auto-approve
          
          echo "💥 All resources have been destroyed!"
          echo "ℹ️ Use the main deployment pipeline (iac_deploy.yml) to recreate infrastructure"

      - name: 📊 Operation Summary
        run: |
          echo "## 💰 TC CloudGames Cost Management - Operation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.operation }}" == *"up"* ]]; then
            echo "### ⬆️ START Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Service Type | Resource Name | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| PostgreSQL | ${{ steps.validate.outputs.postgres_name }} | ▶️ Started |" >> $GITHUB_STEP_SUMMARY
            
            if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
              for app in ${{ steps.validate.outputs.container_apps }}; do
                echo "| Container App | $app | ▶️ Started (1-3 replicas) |" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            echo "| Redis Cache | ${{ steps.validate.outputs.redis_name }} | ℹ️ Always Available |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Registry | ${{ steps.validate.outputs.acr_name }} | ℹ️ Always Available |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Infrastructure is now ACTIVE and ready for development**" >> $GITHUB_STEP_SUMMARY
            
          elif [[ "${{ github.event.inputs.operation }}" == *"down"* ]]; then
            echo "### ⬇️ STOP Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Service Type | Resource Name | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| PostgreSQL | ${{ steps.validate.outputs.postgres_name }} | ⏹️ Stopped |" >> $GITHUB_STEP_SUMMARY
            
            if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
              for app in ${{ steps.validate.outputs.container_apps }}; do
                echo "| Container App | $app | ⏹️ Stopped (0 replicas) |" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            echo "| Redis Cache | ${{ steps.validate.outputs.redis_name }} | ℹ️ Kept Available |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Registry | ${{ steps.validate.outputs.acr_name }} | ℹ️ Kept Available |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💰 **Cost savings active - stopped compute resources**" >> $GITHUB_STEP_SUMMARY
            
          elif [[ "${{ github.event.inputs.operation }}" == *"destroy"* ]]; then
            echo "### 🗑️ DESTROY Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Operation | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Terraform Destroy | 💥 Complete |" >> $GITHUB_STEP_SUMMARY
            echo "| All Resources | 🗑️ Permanently Deleted |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **All infrastructure has been permanently destroyed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Run the **🏗️ Infra | Terraform + AZD Foundation** pipeline to recreate infrastructure" >> $GITHUB_STEP_SUMMARY
            echo "- All resources will be recreated with fresh configurations" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event.inputs.operation }}" != *"destroy"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 Cost Optimization Notes" >> $GITHUB_STEP_SUMMARY
            echo "- **PostgreSQL**: Start/Stop saves ~$50-80/month during off-hours" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Apps**: 0 replicas = no compute costs, instant scale-up available" >> $GITHUB_STEP_SUMMARY
            echo "- **Redis & ACR**: Basic tiers kept available (~$15/month) for development continuity" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Resource Group in Azure Portal](https://portal.azure.com/#@/resource${{ steps.terraform-outputs.outputs.rg_id }}/overview)" >> $GITHUB_STEP_SUMMARY
          fi
