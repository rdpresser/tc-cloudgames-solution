name: üí∞ Infra | Cost Management (Start/Stop/Destroy)

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Choose operation'
        required: true
        type: choice
        options:
          - 'up (start: PostgreSQL + Container Apps)'
          - 'down (stop: PostgreSQL + Container Apps)'
          - 'destroy all resources'
        default: 'up (start: PostgreSQL + Container Apps)'
      confirm_operation:
        description: 'Type operation name to confirm (up/down/destroy)'
        required: true
        default: ''
      confirm_destructive:
        description: 'Confirm Redis/ACR destroy operations'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: '1.13.1'
  TF_WORKING_DIR: './infrastructure/terraform/foundation'
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE: ${{ vars.TF_WORKSPACE_DEV }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  cost-management:
    runs-on: ubuntu-latest
    environment: 'dev-rodrigo'
    timeout-minutes: 15
    if: |
      (github.event.inputs.confirm_operation == 'up' && contains(github.event.inputs.operation, 'up')) ||
      (github.event.inputs.confirm_operation == 'down' && contains(github.event.inputs.operation, 'down')) ||
      (github.event.inputs.confirm_operation == 'destroy' && contains(github.event.inputs.operation, 'destroy'))
    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4

      - name: üîí Validate Required Secrets
        run: |
          if [ -z "${{ secrets.TF_API_TOKEN }}" ]; then
            echo "‚ùå TF_API_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "‚ùå AZURE_CREDENTIALS secret is required"
            exit 1
          fi

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: üì§ Get Terraform Outputs
        id: terraform-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -upgrade
          TERRAFORM_OUTPUT=$(terraform output -json)
          
          # Extract resource group and key info
          RG_NAME=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_name.value')
          RG_ID=$(echo $TERRAFORM_OUTPUT | jq -r '.foundation_rg_id.value')
          
          echo "rg_name=$RG_NAME" >> $GITHUB_OUTPUT
          echo "rg_id=$RG_ID" >> $GITHUB_OUTPUT

      - name: üîí Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üìã Validate Resources
        id: validate
        if: contains(github.event.inputs.operation, 'up') || contains(github.event.inputs.operation, 'down')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "üîç Validating resource group: $RG_NAME"
          
          # Check if resource group exists
          if ! az group show --name "$RG_NAME" > /dev/null 2>&1; then
            echo "‚ùå Resource group not found: $RG_NAME"
            exit 1
          fi
          
          # Get resource information
          POSTGRES_NAME=$(az postgres flexible-server list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          REDIS_NAME=$(az redis list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          ACR_NAME=$(az acr list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          CONTAINER_APP_ENV=$(az containerapp env list --resource-group "$RG_NAME" --query "[0].name" -o tsv)
          
          echo "postgres_name=$POSTGRES_NAME" >> $GITHUB_OUTPUT
          echo "redis_name=$REDIS_NAME" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "container_app_env=$CONTAINER_APP_ENV" >> $GITHUB_OUTPUT
          
          # Get container apps in environment
          if [ ! -z "$CONTAINER_APP_ENV" ]; then
            CONTAINER_APPS=$(az containerapp list --resource-group "$RG_NAME" --query "[].name" -o tsv | tr '\n' ' ')
            echo "container_apps=$CONTAINER_APPS" >> $GITHUB_OUTPUT
          fi

      - name: ‚¨ÜÔ∏è START Services (UP Operation)
        if: contains(github.event.inputs.operation, 'up')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "üöÄ Starting TC CloudGames infrastructure..."
          
          # Start PostgreSQL
          if [ ! -z "${{ steps.validate.outputs.postgres_name }}" ]; then
            echo "‚ñ∂Ô∏è Starting PostgreSQL: ${{ steps.validate.outputs.postgres_name }}"
            az postgres flexible-server start \
              --resource-group "$RG_NAME" \
              --name "${{ steps.validate.outputs.postgres_name }}"
            echo "‚úÖ PostgreSQL started"
          else
            echo "‚ö†Ô∏è No PostgreSQL server found"
          fi
          
          # Start Container Apps (scale up to 1 replica)
          if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
            for app in ${{ steps.validate.outputs.container_apps }}; do
              echo "‚ñ∂Ô∏è Starting Container App: $app"
              az containerapp update \
                --resource-group "$RG_NAME" \
                --name "$app" \
                --min-replicas 1 \
                --max-replicas 3
              echo "‚úÖ Container App $app started"
            done
          else
            echo "‚ö†Ô∏è No Container Apps found"
          fi
          
          # Redis and ACR - expensive resources with recreation capability
          echo "Redis and ACR are expensive resources that generate ongoing costs."
          echo "When UP operation includes destructive operations, these will be recreated using Terraform Cloud API..."
          
          # Get Terraform Cloud workspace ID
          workspace_id=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}" | \
            jq -r '.data.id')
          
          echo "Workspace ID: $workspace_id"
          
          if [[ "${{ inputs.confirm_destructive }}" == "true" ]]; then
            echo "Creating targeted apply run to recreate Redis and ACR resources..."
            
            # Create targeted apply run for Redis and ACR
            run_id=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data '{
                "data": {
                  "type": "runs",
                  "attributes": {
                    "message": "Recreate Redis and ACR resources via GitHub Actions",
                    "target-addrs": [
                      "module.redis.azurerm_redis_cache.redis_cache",
                      "module.acr.azurerm_container_registry.acr"
                    ]
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "type": "workspaces",
                        "id": "'$workspace_id'"
                      }
                    }
                  }
                }
              }' \
              "https://app.terraform.io/api/v2/runs" | \
              jq -r '.data.id')
            
            echo "Terraform Cloud Run ID: $run_id"
            echo "Monitoring run progress..."
            
            # Poll run status
            while true; do
              status=$(curl -s \
                --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
                "https://app.terraform.io/api/v2/runs/$run_id" | \
                jq -r '.data.attributes.status')
              
              echo "Current status: $status"
              
              case $status in
                "applied")
                  echo "‚úÖ Redis and ACR resources successfully recreated!"
                  break
                  ;;
                "errored"|"canceled"|"discarded")
                  echo "‚ùå Run failed with status: $status"
                  exit 1
                  ;;
                "planned_and_finished")
                  echo "‚ö†Ô∏è No changes needed - resources already exist"
                  break
                  ;;
                *)
                  echo "‚è≥ Waiting for run to complete..."
                  sleep 10
                  ;;
              esac
            done
            
            echo "üí∞ Expected monthly cost savings when resources are destroyed: ~$20-50"
          else
            echo "‚ö†Ô∏è Skipping Redis and ACR recreation - confirm_destructive not enabled"
            echo "üí° To enable targeted resource operations, set confirm_destructive: true"
          fi
          
          if [ ! -z "${{ steps.validate.outputs.redis_name }}" ]; then
            echo "‚ÑπÔ∏è Redis Cache: ${{ steps.validate.outputs.redis_name }}"
          fi
          
          if [ ! -z "${{ steps.validate.outputs.acr_name }}" ]; then
            echo "‚ÑπÔ∏è Container Registry: ${{ steps.validate.outputs.acr_name }}"
          fi

      - name: ‚¨áÔ∏è STOP Services (DOWN Operation)
        if: contains(github.event.inputs.operation, 'down')
        run: |
          RG_NAME="${{ steps.terraform-outputs.outputs.rg_name }}"
          echo "üõë Stopping TC CloudGames infrastructure for cost savings..."
          
          # Stop Container Apps (scale down to 0 replicas)
          if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
            for app in ${{ steps.validate.outputs.container_apps }}; do
              echo "‚èπÔ∏è Stopping Container App: $app"
              az containerapp update \
                --resource-group "$RG_NAME" \
                --name "$app" \
                --min-replicas 0 \
                --max-replicas 0
              echo "‚úÖ Container App $app stopped"
            done
          else
            echo "‚ö†Ô∏è No Container Apps found"
          fi
          
          # Stop PostgreSQL
          if [ ! -z "${{ steps.validate.outputs.postgres_name }}" ]; then
            echo "‚èπÔ∏è Stopping PostgreSQL: ${{ steps.validate.outputs.postgres_name }}"
            az postgres flexible-server stop \
              --resource-group "$RG_NAME" \
              --name "${{ steps.validate.outputs.postgres_name }}"
            echo "‚úÖ PostgreSQL stopped"
          else
            echo "‚ö†Ô∏è No PostgreSQL server found"
          fi
          
          # Redis and ACR - targeted destruction for cost optimization
          echo "Redis and ACR are expensive resources generating ongoing costs (~$20-50/month)."
          echo "When DOWN operation includes destructive operations, these will be destroyed using Terraform Cloud API..."
          
          # Get Terraform Cloud workspace ID
          workspace_id=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/${{ env.TF_CLOUD_ORGANIZATION }}/workspaces/${{ env.TF_WORKSPACE }}" | \
            jq -r '.data.id')
          
          echo "Workspace ID: $workspace_id"
          
          if [[ "${{ inputs.confirm_destructive }}" == "true" ]]; then
            echo "Creating targeted destroy run for Redis and ACR resources..."
            
            # Create targeted destroy run for Redis and ACR
            run_id=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data '{
                "data": {
                  "type": "runs",
                  "attributes": {
                    "message": "Destroy Redis and ACR resources for cost optimization via GitHub Actions",
                    "is-destroy": true,
                    "target-addrs": [
                      "module.redis.azurerm_redis_cache.redis_cache",
                      "module.acr.azurerm_container_registry.acr"
                    ]
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "type": "workspaces",
                        "id": "'$workspace_id'"
                      }
                    }
                  }
                }
              }' \
              "https://app.terraform.io/api/v2/runs" | \
              jq -r '.data.id')
            
            echo "Terraform Cloud Destroy Run ID: $run_id"
            echo "Monitoring destroy progress..."
            
            # Poll run status
            while true; do
              status=$(curl -s \
                --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
                "https://app.terraform.io/api/v2/runs/$run_id" | \
                jq -r '.data.attributes.status')
              
              echo "Current status: $status"
              
              case $status in
                "applied")
                  echo "‚úÖ Redis and ACR resources successfully destroyed!"
                  echo "üí∞ Monthly cost savings: ~$20-50"
                  break
                  ;;
                "errored"|"canceled"|"discarded")
                  echo "‚ùå Destroy run failed with status: $status"
                  exit 1
                  ;;
                "planned_and_finished")
                  echo "‚ö†Ô∏è No changes needed - resources already destroyed"
                  break
                  ;;
                *)
                  echo "‚è≥ Waiting for destroy to complete..."
                  sleep 10
                  ;;
              esac
            done
          else
            echo "‚ö†Ô∏è Keeping Redis and ACR running - confirm_destructive not enabled"
            echo "üí° To enable cost optimization, set confirm_destructive: true"
            
            if [ ! -z "${{ steps.validate.outputs.redis_name }}" ]; then
              echo "‚ÑπÔ∏è Redis Cache: ${{ steps.validate.outputs.redis_name }} (keeping available - basic tier)"
            fi
            
            if [ ! -z "${{ steps.validate.outputs.acr_name }}" ]; then
              echo "‚ÑπÔ∏è Container Registry: ${{ steps.validate.outputs.acr_name }} (keeping available - basic tier)"
            fi
          fi

      - name: üóëÔ∏è DESTROY All Resources (DESTROY Operation)
        if: contains(github.event.inputs.operation, 'destroy')
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "üö® DESTROYING TC CloudGames infrastructure..."
          echo "‚ö†Ô∏è This will permanently delete all resources!"
          
          # Terraform destroy
          terraform destroy -auto-approve
          
          echo "üí• All resources have been destroyed!"
          echo "‚ÑπÔ∏è Use the main deployment pipeline (iac_deploy.yml) to recreate infrastructure"

      - name: üìä Operation Summary
        run: |
          echo "## üí∞ TC CloudGames Cost Management - Operation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.operation }}" == *"up"* ]]; then
            echo "### ‚¨ÜÔ∏è START Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Service Type | Resource Name | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| PostgreSQL | ${{ steps.validate.outputs.postgres_name }} | ‚ñ∂Ô∏è Started |" >> $GITHUB_STEP_SUMMARY
            
            if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
              for app in ${{ steps.validate.outputs.container_apps }}; do
                echo "| Container App | $app | ‚ñ∂Ô∏è Started (1-3 replicas) |" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            echo "| Redis Cache | ${{ steps.validate.outputs.redis_name }} | ‚ÑπÔ∏è Always Available |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Registry | ${{ steps.validate.outputs.acr_name }} | ‚ÑπÔ∏è Always Available |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Infrastructure is now ACTIVE and ready for development**" >> $GITHUB_STEP_SUMMARY
            
          elif [[ "${{ github.event.inputs.operation }}" == *"down"* ]]; then
            echo "### ‚¨áÔ∏è STOP Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Service Type | Resource Name | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| PostgreSQL | ${{ steps.validate.outputs.postgres_name }} | ‚èπÔ∏è Stopped |" >> $GITHUB_STEP_SUMMARY
            
            if [ ! -z "${{ steps.validate.outputs.container_apps }}" ]; then
              for app in ${{ steps.validate.outputs.container_apps }}; do
                echo "| Container App | $app | ‚èπÔ∏è Stopped (0 replicas) |" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            echo "| Redis Cache | ${{ steps.validate.outputs.redis_name }} | ‚ÑπÔ∏è Kept Available |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Registry | ${{ steps.validate.outputs.acr_name }} | ‚ÑπÔ∏è Kept Available |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí∞ **Cost savings active - stopped compute resources**" >> $GITHUB_STEP_SUMMARY
            
          elif [[ "${{ github.event.inputs.operation }}" == *"destroy"* ]]; then
            echo "### üóëÔ∏è DESTROY Operation Results" >> $GITHUB_STEP_SUMMARY
            echo "| Operation | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Terraform Destroy | üí• Complete |" >> $GITHUB_STEP_SUMMARY
            echo "| All Resources | üóëÔ∏è Permanently Deleted |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **All infrastructure has been permanently destroyed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîÑ Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Run the **üèóÔ∏è Infra | Terraform + AZD Foundation** pipeline to recreate infrastructure" >> $GITHUB_STEP_SUMMARY
            echo "- All resources will be recreated with fresh configurations" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event.inputs.operation }}" != *"destroy"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üí° Cost Optimization Notes" >> $GITHUB_STEP_SUMMARY
            echo "- **PostgreSQL**: Start/Stop saves ~$50-80/month during off-hours" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Apps**: 0 replicas = no compute costs, instant scale-up available" >> $GITHUB_STEP_SUMMARY
            echo "- **Redis & ACR**: Basic tiers kept available (~$15/month) for development continuity" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîó [View Resource Group in Azure Portal](https://portal.azure.com/#@/resource${{ steps.terraform-outputs.outputs.rg_id }}/overview)" >> $GITHUB_STEP_SUMMARY
          fi
